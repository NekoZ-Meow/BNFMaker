!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.HashedCollections=e():t.HashedCollections=e()}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var t={d:(e,r)=>{for(var s in r)t.o(r,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:r[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{HashMap:()=>o,HashSet:()=>l,HashedCollection:()=>n});class r{constructor(t){this.item=t}next(){return this.value=this.item,this.done=!this.item,this.item=this.item?this.item.next:void 0,this}}class s{prepend(t){var e=this.list;if(!(t&&t.append&&t.prepend&&t.detach))throw new Error("An argument without append, prepend, or detach methods was given to `Item#prepend`.");return!(!e||this===t)&&(t.detach(),this.prev&&(t.prev=this.prev,this.prev.next=t),t.next=this,t.list=e,this.prev=t,this===e.head&&(e.head=t),e.tail||(e.tail=this),e.size++,t)}append(t){var e=this.list;if(!(t&&t.append&&t.prepend&&t.detach))throw new Error("An argument without append, prepend, or detach methods was given to `Item#append`.");return!(!e||this===t)&&(t.detach(),this.next&&(t.next=this.next,this.next.prev=t),t.prev=this,t.list=e,this.next=t,this!==e.tail&&e.tail||(e.tail=t),e.size++,t)}detach(){var t=this.list;return t?(t.tail===this&&(t.tail=this.prev),t.head===this&&(t.head=this.next),t.tail===t.head&&(t.tail=null),this.prev&&(this.prev.next=this.next),this.next&&(this.next.prev=this.prev),this.prev=this.next=this.list=null,t.size--,this):this}}s.prototype.next=s.prototype.prev=s.prototype.list=null;class i{static of(...t){return a(new this,t)}static from(t){return a(new this,t)}constructor(...t){a(this,t)}toArray(){for(var t=this.head,e=[];t;)e.push(t),t=t.next;return e}prepend(t){if(!t)return!1;if(!t.append||!t.prepend||!t.detach)throw new Error("An argument without append, prepend, or detach methods was given to `List#prepend`.");return this.head?this.head.prepend(t):(t.detach(),t.list=this,this.head=t,this.size++,t)}append(t){if(!t)return!1;if(!t.append||!t.prepend||!t.detach)throw new Error("An argument without append, prepend, or detach methods was given to `List#append`.");return this.tail?this.tail.append(t):this.head?this.head.append(t):(t.detach(),t.list=this,this.head=t,this.size++,t)}[Symbol.iterator](){return new r(this.head)}}function a(t,e){var r,s,i;if(!e)return t;if(e[Symbol.iterator])for(i=e[Symbol.iterator](),s={};!s.done;)s=i.next(),t.append(s&&s.value);else for(r=-1;++r<e.length;)t.append(e[r]);return t}i.prototype.size=0,i.prototype.tail=i.prototype.head=null;class n extends Object{tally=0;constructor(){super()}}class h extends s{key;value;constructor(t,e){super(),this.key=t,this.value=e}getKey(){return this.key}getValue(){return this.value}getItem(){return[this.key,this.value]}}class o extends n{aMap;constructor(...t){super(),this.aMap=new Map,this.addAll(...t)}add(t){const[e,r]=t,s=e.hash();return this.aMap.has(s)?this.aMap.get(s)?.append(new h(e,r)):this.aMap.set(s,new i(new h(e,r))),this.tally+=1,this}addAll(...t){return t.forEach((t=>{this.add(t)})),this}clear(){this.aMap.clear(),this.tally=0}forEach(t){const e=this.entries();let r=e.next();for(;void 0!==r.done&&!r.done;){const[s,i]=r.value;t(i,s,this),r=e.next()}}entries(){return this.makeIterator(((t,e)=>[t,e]))}equals(t){if(null==t)return!1;if(!(t instanceof o))return!1;if(this.size()!==t.size())return!1;if(t.hash()!==this.hash())return!1;for(const[e,r]of this.entries()){const s=t.get(e);if(null===s)return!1;if(void 0!==r.equals){if(!1===r.equals(s))return!1}else if(r!==s)return!1}return!0}delete(t){const e=this.search(t);if(null!=e){const r=e.list;return e.detach(),this.tally-=1,0===r.size&&this.aMap.delete(t.hash()),e.getValue()}return null}get(t){const e=this.search(t);return null!==e?e.getValue():null}has(t){return null!==this.search(t)}hash(){return 0===this.tally?0:Array.from(this.aMap.keys()).reduce(((t,e)=>(t+e)%Number.MAX_SAFE_INTEGER))}keys(){return this.makeIterator((t=>t))}makeIterator(t){const e=this.aMap.values();return function*(){let r=e.next();for(;void 0!==r.done&&!r.done;){let s=r.value.head;for(;null!==s;){const[e,r]=s.getItem();yield t(e,r),s=s.next}r=e.next()}}()}search(t){const e=t.hash();if(this.aMap.has(e)){let r=this.aMap.get(e)?.head;for(;r;){const e=r.getKey();if(t.equals(e))return r;r=r.next}}return null}set(t,e){return this.add([t,e])}setDefault(t,e){return this.has(t)?null:(this.set(t,e),e)}size(){return this.tally}values(){return this.makeIterator(((t,e)=>e))}toArray(){const t=new Array;return this.tally,Array.from(this.aMap.values()).forEach((e=>{let r=e.head;for(;r;)t.push(r.getItem()),r=r.next})),t}toString(){const t=this.toArray().map((([t,e])=>`${String(t)} => ${String(e)}`)).join(", ");return`HashMap(${this.size()}) { ${t} }`}}class l extends n{aMap;constructor(...t){super(),this.aMap=new o,this.addAll(...t)}add(t){return this.has(t)||this.aMap.set(t,t),this}addAll(...t){return t.forEach((t=>{this.add(t)})),this}clear(){this.aMap.clear()}delete(t){return this.aMap.delete(t)}entries(){return this.aMap.entries()}equals(t){if(null==t)return!1;if(!(t instanceof l))return!1;if(this.size()!==t.size())return!1;if(t.hash()!==this.hash())return!1;for(const e of this.values())if(!t.has(e))return!1;return!0}forEach(t){const e=this.entries();let r=e.next();for(;void 0!==r.done&&!r.done;){const[s,i]=r.value;t(s,i,this),r=e.next()}}has(t){return this.aMap.has(t)}hash(){return this.aMap.hash()}keys(){return this.aMap.keys()}size(){return this.aMap.size()}values(){return this.keys()}toArray(){return this.aMap.toArray().map((t=>t[0]))}toString(){const t=this.toArray().map((t=>String(t))).join(", ");return`HashSet(${this.size()}) { ${t} }`}}return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,