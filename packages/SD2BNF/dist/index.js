/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.SD2BNF=e():t.SD2BNF=e()}("undefined"!=typeof self?self:this,(()=>(()=>{var t={696:(t,e,r)=>{"use strict";var n=r(406),o=r(716);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var a,s,c=r(515).codes,u=c.ERR_AMBIGUOUS_ARGUMENT,l=c.ERR_INVALID_ARG_TYPE,f=c.ERR_INVALID_ARG_VALUE,p=c.ERR_INVALID_RETURN_VALUE,y=c.ERR_MISSING_ARGS,h=r(320),g=r(335).inspect,d=r(335).types,m=d.isPromise,b=d.isRegExp,v=Object.assign?Object.assign:r(956).assign,S=Object.is?Object.is:r(512);function w(){var t=r(796);a=t.isDeepEqual,s=t.isDeepStrictEqual}new Map;var E=!1,A=t.exports=P,O={};function x(t){if(t.message instanceof Error)throw t.message;throw new h(t)}function j(t,e,r,n){if(!r){var o=!1;if(0===e)o=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var i=new h({actual:r,expected:!0,message:n,operator:"==",stackStartFn:t});throw i.generatedMessage=o,i}}function P(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];j.apply(void 0,[P,e.length].concat(e))}A.fail=function t(e,r,i,a,s){var c,u=arguments.length;if(0===u?c="Failed":1===u?(i=e,e=void 0):(!1===E&&(E=!0,(n.emitWarning?n.emitWarning:o.warn.bind(o))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")),2===u&&(a="!=")),i instanceof Error)throw i;var l={actual:e,expected:r,operator:void 0===a?"fail":a,stackStartFn:s||t};void 0!==i&&(l.message=i);var f=new h(l);throw c&&(f.message=c,f.generatedMessage=!0),f},A.AssertionError=h,A.ok=P,A.equal=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");e!=r&&x({actual:e,expected:r,message:n,operator:"==",stackStartFn:t})},A.notEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");e==r&&x({actual:e,expected:r,message:n,operator:"!=",stackStartFn:t})},A.deepEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&w(),a(e,r)||x({actual:e,expected:r,message:n,operator:"deepEqual",stackStartFn:t})},A.notDeepEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&w(),a(e,r)&&x({actual:e,expected:r,message:n,operator:"notDeepEqual",stackStartFn:t})},A.deepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&w(),s(e,r)||x({actual:e,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:t})},A.notDeepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&w(),s(e,r)&&x({actual:e,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:t})},A.strictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");S(e,r)||x({actual:e,expected:r,message:n,operator:"strictEqual",stackStartFn:t})},A.notStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");S(e,r)&&x({actual:e,expected:r,message:n,operator:"notStrictEqual",stackStartFn:t})};var T=function t(e,r,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r.forEach((function(t){t in e&&(void 0!==n&&"string"==typeof n[t]&&b(e[t])&&e[t].test(n[t])?o[t]=n[t]:o[t]=e[t])}))};function N(t,e,r,n){if("function"!=typeof e){if(b(e))return e.test(t);if(2===arguments.length)throw new l("expected",["Function","RegExp"],e);if("object"!==i(t)||null===t){var o=new h({actual:t,expected:e,message:r,operator:"deepStrictEqual",stackStartFn:n});throw o.operator=n.name,o}var c=Object.keys(e);if(e instanceof Error)c.push("name","message");else if(0===c.length)throw new f("error",e,"may not be an empty object");return void 0===a&&w(),c.forEach((function(o){"string"==typeof t[o]&&b(e[o])&&e[o].test(t[o])||function(t,e,r,n,o,i){if(!(r in t)||!s(t[r],e[r])){if(!n){var a=new T(t,o),c=new T(e,o,t),u=new h({actual:a,expected:c,operator:"deepStrictEqual",stackStartFn:i});throw u.actual=t,u.expected=e,u.operator=i.name,u}x({actual:t,expected:e,message:n,operator:i.name,stackStartFn:i})}}(t,e,o,r,c,n)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function R(t){if("function"!=typeof t)throw new l("fn","Function",t);try{t()}catch(t){return t}return O}function I(t){return m(t)||null!==t&&"object"===i(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function M(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!I(e=t()))throw new p("instance of Promise","promiseFn",e)}else{if(!I(t))throw new l("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return O})).catch((function(t){return t}))}))}function C(t,e,r,n){if("string"==typeof r){if(4===arguments.length)throw new l("error",["Object","Error","Function","RegExp"],r);if("object"===i(e)&&null!==e){if(e.message===r)throw new u("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===r)throw new u("error/message",'The error "'.concat(e,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==i(r)&&"function"!=typeof r)throw new l("error",["Object","Error","Function","RegExp"],r);if(e===O){var o="";r&&r.name&&(o+=" (".concat(r.name,")")),o+=n?": ".concat(n):".";var a="rejects"===t.name?"rejection":"exception";x({actual:void 0,expected:r,operator:t.name,message:"Missing expected ".concat(a).concat(o),stackStartFn:t})}if(r&&!N(e,r,n,t))throw e}function F(t,e,r,n){if(e!==O){if("string"==typeof r&&(n=r,r=void 0),!r||N(e,r)){var o=n?": ".concat(n):".",i="doesNotReject"===t.name?"rejection":"exception";x({actual:e,expected:r,operator:t.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function k(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];j.apply(void 0,[k,e.length].concat(e))}A.throws=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];C.apply(void 0,[t,R(e)].concat(n))},A.rejects=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return M(e).then((function(e){return C.apply(void 0,[t,e].concat(n))}))},A.doesNotThrow=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];F.apply(void 0,[t,R(e)].concat(n))},A.doesNotReject=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return M(e).then((function(e){return F.apply(void 0,[t,e].concat(n))}))},A.ifError=function t(e){if(null!=e){var r="ifError got unwanted exception: ";"object"===i(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?r+=e.constructor.name:r+=e.message:r+=g(e);var n=new h({actual:e,expected:null,operator:"ifError",message:r,stackStartFn:t}),o=e.stack;if("string"==typeof o){var a=o.split("\n");a.shift();for(var s=n.stack.split("\n"),c=0;c<a.length;c++){var u=s.indexOf(a[c]);if(-1!==u){s=s.slice(0,u);break}}n.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw n}},A.strict=v(k,A,{equal:A.strictEqual,deepEqual:A.deepStrictEqual,notEqual:A.notStrictEqual,notDeepEqual:A.notDeepStrictEqual}),A.strict.strict=A.strict},320:(t,e,r)=>{"use strict";var n=r(406);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e){return!e||"object"!==p(e)&&"function"!=typeof e?s(t):e}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function c(t){var e="function"==typeof Map?new Map:void 0;return c=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return u(t,arguments,f(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),l(n,t)},c(t)}function u(t,e,r){return u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&l(o,r.prototype),o},u.apply(null,arguments)}function l(t,e){return l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},l(t,e)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}var y=r(335).inspect,h=r(515).codes.ERR_INVALID_ARG_TYPE;function g(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}var d="",m="",b="",v="",S={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},w=10;function E(t){var e=Object.keys(t),r=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){r[e]=t[e]})),Object.defineProperty(r,"message",{value:t.message}),r}function A(t){return y(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var O=function(t){function e(t){var r;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),"object"!==p(t)||null===t)throw new h("options","Object",t);var o=t.message,i=t.operator,c=t.stackStartFn,u=t.actual,l=t.expected,y=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=o)r=a(this,f(e).call(this,String(o)));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(d="[34m",m="[32m",v="[39m",b="[31m"):(d="",m="",v="",b="")),"object"===p(u)&&null!==u&&"object"===p(l)&&null!==l&&"stack"in u&&u instanceof Error&&"stack"in l&&l instanceof Error&&(u=E(u),l=E(l)),"deepStrictEqual"===i||"strictEqual"===i)r=a(this,f(e).call(this,function(t,e,r){var o="",i="",a=0,s="",c=!1,u=A(t),l=u.split("\n"),f=A(e).split("\n"),y=0,h="";if("strictEqual"===r&&"object"===p(t)&&"object"===p(e)&&null!==t&&null!==e&&(r="strictEqualObject"),1===l.length&&1===f.length&&l[0]!==f[0]){var E=l[0].length+f[0].length;if(E<=w){if(!("object"===p(t)&&null!==t||"object"===p(e)&&null!==e||0===t&&0===e))return"".concat(S[r],"\n\n")+"".concat(l[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==r&&E<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;l[0][y]===f[0][y];)y++;y>2&&(h="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var r=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,r-t.length)}(" ",y),"^"),y=0)}}for(var O=l[l.length-1],x=f[f.length-1];O===x&&(y++<2?s="\n  ".concat(O).concat(s):o=O,l.pop(),f.pop(),0!==l.length&&0!==f.length);)O=l[l.length-1],x=f[f.length-1];var j=Math.max(l.length,f.length);if(0===j){var P=u.split("\n");if(P.length>30)for(P[26]="".concat(d,"...").concat(v);P.length>27;)P.pop();return"".concat(S.notIdentical,"\n\n").concat(P.join("\n"),"\n")}y>3&&(s="\n".concat(d,"...").concat(v).concat(s),c=!0),""!==o&&(s="\n  ".concat(o).concat(s),o="");var T=0,N=S[r]+"\n".concat(m,"+ actual").concat(v," ").concat(b,"- expected").concat(v),R=" ".concat(d,"...").concat(v," Lines skipped");for(y=0;y<j;y++){var I=y-a;if(l.length<y+1)I>1&&y>2&&(I>4?(i+="\n".concat(d,"...").concat(v),c=!0):I>3&&(i+="\n  ".concat(f[y-2]),T++),i+="\n  ".concat(f[y-1]),T++),a=y,o+="\n".concat(b,"-").concat(v," ").concat(f[y]),T++;else if(f.length<y+1)I>1&&y>2&&(I>4?(i+="\n".concat(d,"...").concat(v),c=!0):I>3&&(i+="\n  ".concat(l[y-2]),T++),i+="\n  ".concat(l[y-1]),T++),a=y,i+="\n".concat(m,"+").concat(v," ").concat(l[y]),T++;else{var M=f[y],C=l[y],F=C!==M&&(!g(C,",")||C.slice(0,-1)!==M);F&&g(M,",")&&M.slice(0,-1)===C&&(F=!1,C+=","),F?(I>1&&y>2&&(I>4?(i+="\n".concat(d,"...").concat(v),c=!0):I>3&&(i+="\n  ".concat(l[y-2]),T++),i+="\n  ".concat(l[y-1]),T++),a=y,i+="\n".concat(m,"+").concat(v," ").concat(C),o+="\n".concat(b,"-").concat(v," ").concat(M),T+=2):(i+=o,o="",1!==I&&0!==y||(i+="\n  ".concat(C),T++))}if(T>20&&y<j-2)return"".concat(N).concat(R,"\n").concat(i,"\n").concat(d,"...").concat(v).concat(o,"\n")+"".concat(d,"...").concat(v)}return"".concat(N).concat(c?R:"","\n").concat(i).concat(o).concat(s).concat(h)}(u,l,i)));else if("notDeepStrictEqual"===i||"notStrictEqual"===i){var O=S[i],x=A(u).split("\n");if("notStrictEqual"===i&&"object"===p(u)&&null!==u&&(O=S.notStrictEqualObject),x.length>30)for(x[26]="".concat(d,"...").concat(v);x.length>27;)x.pop();r=1===x.length?a(this,f(e).call(this,"".concat(O," ").concat(x[0]))):a(this,f(e).call(this,"".concat(O,"\n\n").concat(x.join("\n"),"\n")))}else{var j=A(u),P="",T=S[i];"notDeepEqual"===i||"notEqual"===i?(j="".concat(S[i],"\n\n").concat(j)).length>1024&&(j="".concat(j.slice(0,1021),"...")):(P="".concat(A(l)),j.length>512&&(j="".concat(j.slice(0,509),"...")),P.length>512&&(P="".concat(P.slice(0,509),"...")),"deepEqual"===i||"equal"===i?j="".concat(T,"\n\n").concat(j,"\n\nshould equal\n\n"):P=" ".concat(i," ").concat(P)),r=a(this,f(e).call(this,"".concat(j).concat(P)))}return Error.stackTraceLimit=y,r.generatedMessage=!o,Object.defineProperty(s(r),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),r.code="ERR_ASSERTION",r.actual=u,r.expected=l,r.operator=i,Error.captureStackTrace&&Error.captureStackTrace(s(r),c),r.stack,r.name="AssertionError",a(r)}var r,c;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,t),r=e,c=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:y.custom,value:function(t,e){return y(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){o(t,e,r[e])}))}return t}({},e,{customInspect:!1,depth:0}))}}],c&&i(r.prototype,c),e}(c(Error));t.exports=O},515:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){return o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},o(t)}function i(t,e){return i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},i(t,e)}var a,s,c={};function u(t,e,r){r||(r=Error);var a=function(r){function a(r,i,s){var c;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,o(a).call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,i,s))),c.code=t,c}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(a,r),a}(r);c[t]=a}function l(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}u("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),u("ERR_INVALID_ARG_TYPE",(function(t,e,o){var i,s,c,u,f;if(void 0===a&&(a=r(696)),a("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(s="not ",e.substr(0,s.length)===s)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))c="The ".concat(t," ").concat(i," ").concat(l(e,"type"));else{var p=("number"!=typeof f&&(f=0),f+".".length>(u=t).length||-1===u.indexOf(".",f)?"argument":"property");c='The "'.concat(t,'" ').concat(p," ").concat(i," ").concat(l(e,"type"))}return c+". Received type ".concat(n(o))}),TypeError),u("ERR_INVALID_ARG_VALUE",(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(335));var o=s.inspect(e);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(n,". Received ").concat(o)}),TypeError,RangeError),u("ERR_INVALID_RETURN_VALUE",(function(t,e,r){var o;return o=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(o,".")}),TypeError),u("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];void 0===a&&(a=r(696)),a(e.length>0,"At least one arg needs to be specified");var o="The ",i=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),i){case 1:o+="".concat(e[0]," argument");break;case 2:o+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:o+=e.slice(0,i-1).join(", "),o+=", and ".concat(e[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),t.exports.codes=c},796:(t,e,r)=>{"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}var i=void 0!==/a/g.flags,a=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},s=function(t){var e=[];return t.forEach((function(t,r){return e.push([r,t])})),e},c=Object.is?Object.is:r(512),u=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},l=Number.isNaN?Number.isNaN:r(782);function f(t){return t.call.bind(t)}var p=f(Object.prototype.hasOwnProperty),y=f(Object.prototype.propertyIsEnumerable),h=f(Object.prototype.toString),g=r(335).types,d=g.isAnyArrayBuffer,m=g.isArrayBufferView,b=g.isDate,v=g.isMap,S=g.isRegExp,w=g.isSet,E=g.isNativeError,A=g.isBoxedPrimitive,O=g.isNumberObject,x=g.isStringObject,j=g.isBooleanObject,P=g.isBigIntObject,T=g.isSymbolObject,N=g.isFloat32Array,R=g.isFloat64Array;function I(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var r=t.charCodeAt(e);if(r<48||r>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function M(t){return Object.keys(t).filter(I).concat(u(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function C(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0}var F=0,k=1,_=2,D=3;function q(t,e,r,n){if(t===e)return 0!==t||!r||c(t,e);if(r){if("object"!==o(t))return"number"==typeof t&&l(t)&&l(e);if("object"!==o(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==o(t))return(null===e||"object"!==o(e))&&t==e;if(null===e||"object"!==o(e))return!1}var a,s,u,f,p=h(t);if(p!==h(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var y=M(t),g=M(e);return y.length===g.length&&B(t,e,r,n,k,y)}if("[object Object]"===p&&(!v(t)&&v(e)||!w(t)&&w(e)))return!1;if(b(t)){if(!b(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(S(t)){if(!S(e)||(u=t,f=e,!(i?u.source===f.source&&u.flags===f.flags:RegExp.prototype.toString.call(u)===RegExp.prototype.toString.call(f))))return!1}else if(E(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(m(t)){if(r||!N(t)&&!R(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===C(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var r=0;r<t.byteLength;r++)if(t[r]!==e[r])return!1;return!0}(t,e))return!1;var I=M(t),q=M(e);return I.length===q.length&&B(t,e,r,n,F,I)}if(w(t))return!(!w(e)||t.size!==e.size)&&B(t,e,r,n,_);if(v(t))return!(!v(e)||t.size!==e.size)&&B(t,e,r,n,D);if(d(t)){if(s=e,(a=t).byteLength!==s.byteLength||0!==C(new Uint8Array(a),new Uint8Array(s)))return!1}else if(A(t)&&!function(t,e){return O(t)?O(e)&&c(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):x(t)?x(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):j(t)?j(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):P(t)?P(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):T(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return B(t,e,r,n,F)}function U(t,e){return e.filter((function(e){return y(t,e)}))}function B(t,e,r,i,c,l){if(5===arguments.length){l=Object.keys(t);var f=Object.keys(e);if(l.length!==f.length)return!1}for(var h=0;h<l.length;h++)if(!p(e,l[h]))return!1;if(r&&5===arguments.length){var g=u(t);if(0!==g.length){var d=0;for(h=0;h<g.length;h++){var m=g[h];if(y(t,m)){if(!y(e,m))return!1;l.push(m),d++}else if(y(e,m))return!1}var b=u(e);if(g.length!==b.length&&U(e,b).length!==d)return!1}else{var v=u(e);if(0!==v.length&&0!==U(e,v).length)return!1}}if(0===l.length&&(c===F||c===k&&0===t.length||0===t.size))return!0;if(void 0===i)i={val1:new Map,val2:new Map,position:0};else{var S=i.val1.get(t);if(void 0!==S){var w=i.val2.get(e);if(void 0!==w)return S===w}i.position++}i.val1.set(t,i.position),i.val2.set(e,i.position);var E=function(t,e,r,i,c,u){var l=0;if(u===_){if(!function(t,e,r,n){for(var i=null,s=a(t),c=0;c<s.length;c++){var u=s[c];if("object"===o(u)&&null!==u)null===i&&(i=new Set),i.add(u);else if(!e.has(u)){if(r)return!1;if(!$(t,e,u))return!1;null===i&&(i=new Set),i.add(u)}}if(null!==i){for(var l=a(e),f=0;f<l.length;f++){var p=l[f];if("object"===o(p)&&null!==p){if(!z(i,p,r,n))return!1}else if(!r&&!t.has(p)&&!z(i,p,r,n))return!1}return 0===i.size}return!0}(t,e,r,c))return!1}else if(u===D){if(!function(t,e,r,i){for(var a=null,c=s(t),u=0;u<c.length;u++){var l=n(c[u],2),f=l[0],p=l[1];if("object"===o(f)&&null!==f)null===a&&(a=new Set),a.add(f);else{var y=e.get(f);if(void 0===y&&!e.has(f)||!q(p,y,r,i)){if(r)return!1;if(!G(t,e,f,p,i))return!1;null===a&&(a=new Set),a.add(f)}}}if(null!==a){for(var h=s(e),g=0;g<h.length;g++){var d=n(h[g],2),m=(f=d[0],d[1]);if("object"===o(f)&&null!==f){if(!V(a,t,f,m,r,i))return!1}else if(!(r||t.has(f)&&q(t.get(f),m,!1,i)||V(a,t,f,m,!1,i)))return!1}return 0===a.size}return!0}(t,e,r,c))return!1}else if(u===k)for(;l<t.length;l++){if(!p(t,l)){if(p(e,l))return!1;for(var f=Object.keys(t);l<f.length;l++){var y=f[l];if(!p(e,y)||!q(t[y],e[y],r,c))return!1}return f.length===Object.keys(e).length}if(!p(e,l)||!q(t[l],e[l],r,c))return!1}for(l=0;l<i.length;l++){var h=i[l];if(!q(t[h],e[h],r,c))return!1}return!0}(t,e,r,l,i,c);return i.val1.delete(t),i.val2.delete(e),E}function z(t,e,r,n){for(var o=a(t),i=0;i<o.length;i++){var s=o[i];if(q(e,s,r,n))return t.delete(s),!0}return!1}function L(t){switch(o(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(l(t))return!1}return!0}function $(t,e,r){var n=L(r);return null!=n?n:e.has(n)&&!t.has(n)}function G(t,e,r,n,o){var i=L(r);if(null!=i)return i;var a=e.get(i);return!(void 0===a&&!e.has(i)||!q(n,a,!1,o))&&!t.has(i)&&q(n,a,!1,o)}function V(t,e,r,n,o,i){for(var s=a(t),c=0;c<s.length;c++){var u=s[c];if(q(r,u,o,i)&&q(n,e.get(u),o,i))return t.delete(u),!0}return!1}t.exports={isDeepEqual:function(t,e){return q(t,e,false)},isDeepStrictEqual:function(t,e){return q(t,e,true)}}},680:(t,e,r)=>{"use strict";var n=r(286),o=r(429),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")>-1?o(r):r}},429:(t,e,r)=>{"use strict";var n=r(90),o=r(286),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),s=o("%Reflect.apply%",!0)||n.call(a,i),c=o("%Object.getOwnPropertyDescriptor%",!0),u=o("%Object.defineProperty%",!0),l=o("%Math.max%");if(u)try{u({},"a",{value:1})}catch(t){u=null}t.exports=function(t){var e=s(n,a,arguments);return c&&u&&c(e,"length").configurable&&u(e,"length",{value:1+l(0,t.length-(arguments.length-1))}),e};var f=function(){return s(n,i,arguments)};u?u(t.exports,"apply",{value:f}):t.exports.apply=f},716:(t,e,r)=>{var n=r(335),o=r(696);function i(){return(new Date).getTime()}var a,s=Array.prototype.slice,c={};a=void 0!==r.g&&r.g.console?r.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var u=[[function(){},"log"],[function(){a.log.apply(a,arguments)},"info"],[function(){a.log.apply(a,arguments)},"warn"],[function(){a.warn.apply(a,arguments)},"error"],[function(t){c[t]=i()},"time"],[function(t){var e=c[t];if(!e)throw new Error("No such label: "+t);delete c[t];var r=i()-e;a.log(t+": "+r+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=n.format.apply(null,arguments),a.error(t.stack)},"trace"],[function(t){a.log(n.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=s.call(arguments,1);o.ok(!1,n.format.apply(null,e))}},"assert"]],l=0;l<u.length;l++){var f=u[l],p=f[0],y=f[1];a[y]||(a[y]=p)}t.exports=a},926:(t,e,r)=>{"use strict";var n=r(464),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=Object.defineProperty,c=r(181)(),u=s&&c,l=function(t,e,r,n){var o;(!(e in t)||"function"==typeof(o=n)&&"[object Function]"===i.call(o)&&n())&&(u?s(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},f=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)l(t,i[s],e[i[s]],r[i[s]])};f.supportsDescriptors=!!u,t.exports=f},956:t=>{"use strict";function e(t,e){if(null==t)throw new TypeError("Cannot convert first argument to object");for(var r=Object(t),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o)for(var i=Object.keys(Object(o)),a=0,s=i.length;a<s;a++){var c=i[a],u=Object.getOwnPropertyDescriptor(o,c);void 0!==u&&u.enumerable&&(r[c]=o[c])}}return r}t.exports={assign:e,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:e})}}},243:(t,e,r)=>{"use strict";var n=r(915),o=Object.prototype.toString,i=Object.prototype.hasOwnProperty,a=function(t,e,r){for(var n=0,o=t.length;n<o;n++)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))},s=function(t,e,r){for(var n=0,o=t.length;n<o;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)},c=function(t,e,r){for(var n in t)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))};t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var i;arguments.length>=3&&(i=r),"[object Array]"===o.call(t)?a(t,e,i):"string"==typeof t?s(t,e,i):c(t,e,i)}},795:t=>{"use strict";var e="Function.prototype.bind called on incompatible ",r=Array.prototype.slice,n=Object.prototype.toString,o="[object Function]";t.exports=function(t){var i=this;if("function"!=typeof i||n.call(i)!==o)throw new TypeError(e+i);for(var a,s=r.call(arguments,1),c=Math.max(0,i.length-s.length),u=[],l=0;l<c;l++)u.push("$"+l);if(a=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof a){var e=i.apply(this,s.concat(r.call(arguments)));return Object(e)===e?e:this}return i.apply(t,s.concat(r.call(arguments)))})),i.prototype){var f=function(){};f.prototype=i.prototype,a.prototype=new f,f.prototype=null}return a}},90:(t,e,r)=>{"use strict";var n=r(795);t.exports=Function.prototype.bind||n},286:(t,e,r)=>{"use strict";var n,o=SyntaxError,i=Function,a=TypeError,s=function(t){try{return i('"use strict"; return ('+t+").constructor;")()}catch(t){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(t){c=null}var u=function(){throw new a},l=c?function(){try{return u}catch(t){try{return c(arguments,"callee").get}catch(t){return u}}}():u,f=r(636)(),p=Object.getPrototypeOf||function(t){return t.__proto__},y={},h="undefined"==typeof Uint8Array?n:p(Uint8Array),g={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":y,"%AsyncGenerator%":y,"%AsyncGeneratorFunction%":y,"%AsyncIteratorPrototype%":y,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":y,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):n,"%Symbol%":f?Symbol:n,"%SyntaxError%":o,"%ThrowTypeError%":l,"%TypedArray%":h,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};try{null.error}catch(t){var d=p(p(t));g["%Error.prototype%"]=d}var m=function t(e){var r;if("%AsyncFunction%"===e)r=s("async function () {}");else if("%GeneratorFunction%"===e)r=s("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=s("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&(r=p(o.prototype))}return g[e]=r,r},b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},v=r(90),S=r(198),w=v.call(Function.call,Array.prototype.concat),E=v.call(Function.apply,Array.prototype.splice),A=v.call(Function.call,String.prototype.replace),O=v.call(Function.call,String.prototype.slice),x=v.call(Function.call,RegExp.prototype.exec),j=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,P=/\\(\\)?/g,T=function(t){var e=O(t,0,1),r=O(t,-1);if("%"===e&&"%"!==r)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new o("invalid intrinsic syntax, expected opening `%`");var n=[];return A(t,j,(function(t,e,r,o){n[n.length]=r?A(o,P,"$1"):e||t})),n},N=function(t,e){var r,n=t;if(S(b,n)&&(n="%"+(r=b[n])[0]+"%"),S(g,n)){var i=g[n];if(i===y&&(i=m(n)),void 0===i&&!e)throw new a("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:i}}throw new o("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new a('"allowMissing" argument must be a boolean');if(null===x(/^%?[^%]*%?$/,t))throw new o("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=T(t),n=r.length>0?r[0]:"",i=N("%"+n+"%",e),s=i.name,u=i.value,l=!1,f=i.alias;f&&(n=f[0],E(r,w([0,1],f)));for(var p=1,y=!0;p<r.length;p+=1){var h=r[p],d=O(h,0,1),m=O(h,-1);if(('"'===d||"'"===d||"`"===d||'"'===m||"'"===m||"`"===m)&&d!==m)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&y||(l=!0),S(g,s="%"+(n+="."+h)+"%"))u=g[s];else if(null!=u){if(!(h in u)){if(!e)throw new a("base intrinsic for "+t+" exists, but the property is not available.");return}if(c&&p+1>=r.length){var b=c(u,h);u=(y=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:u[h]}else y=S(u,h),u=u[h];y&&!l&&(g[s]=u)}}return u}},326:(t,e,r)=>{"use strict";var n=r(286)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},181:(t,e,r)=>{"use strict";var n=r(286)("%Object.defineProperty%",!0),o=function(){if(n)try{return n({},"a",{value:1}),!0}catch(t){return!1}return!1};o.hasArrayLengthDefineBug=function(){if(!o())return null;try{return 1!==n([],"length",{value:1}).length}catch(t){return!0}},t.exports=o},636:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(679);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&o()}},679:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},226:(t,e,r)=>{"use strict";var n=r(679);t.exports=function(){return n()&&!!Symbol.toStringTag}},198:(t,e,r)=>{"use strict";var n=r(90);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},285:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},635:(t,e,r)=>{"use strict";var n=r(226)(),o=r(680)("Object.prototype.toString"),i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=s?i:a},915:t=>{"use strict";var e,r,n=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},o((function(){throw 42}),null,e)}catch(t){t!==r&&(o=null)}else o=null;var i=/^\s*class\b/,a=function(t){try{var e=n.call(t);return i.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},c=Object.prototype.toString,u="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;c.call(p)===c.call(document.all)&&(f=function(t){if((l||!t)&&(void 0===t||"object"==typeof t))try{var e=c.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=o?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{o(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(u)return s(t);if(a(t))return!1;var e=c.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},138:(t,e,r)=>{"use strict";var n,o=Object.prototype.toString,i=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(226)(),c=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(i.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===o.call(t);if(!c)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&c(e)}return c(t)===n}},53:t=>{"use strict";t.exports=function(t){return t!=t}},782:(t,e,r)=>{"use strict";var n=r(429),o=r(926),i=r(53),a=r(755),s=r(346),c=n(a(),Number);o(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},755:(t,e,r)=>{"use strict";var n=r(53);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},346:(t,e,r)=>{"use strict";var n=r(926),o=r(755);t.exports=function(){var t=o();return n(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},21:(t,e,r)=>{"use strict";var n=r(243),o=r(191),i=r(680),a=i("Object.prototype.toString"),s=r(226)(),c=r(326),u="undefined"==typeof globalThis?r.g:globalThis,l=o(),f=i("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},p=i("String.prototype.slice"),y={},h=Object.getPrototypeOf;s&&c&&h&&n(l,(function(t){var e=new u[t];if(Symbol.toStringTag in e){var r=h(e),n=c(r,Symbol.toStringTag);if(!n){var o=h(r);n=c(o,Symbol.toStringTag)}y[t]=n.get}})),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!s||!(Symbol.toStringTag in t)){var e=p(a(t),8,-1);return f(l,e)>-1}return!!c&&function(t){var e=!1;return n(y,(function(r,n){if(!e)try{e=r.call(t)===n}catch(t){}})),e}(t)}},169:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,r){return 0===t&&0===r?1/t==1/r:t===r||!(!e(t)||!e(r))}},512:(t,e,r)=>{"use strict";var n=r(926),o=r(429),i=r(169),a=r(70),s=r(719),c=o(a(),Object);n(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},70:(t,e,r)=>{"use strict";var n=r(169);t.exports=function(){return"function"==typeof Object.is?Object.is:n}},719:(t,e,r)=>{"use strict";var n=r(70),o=r(926);t.exports=function(){var t=n();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},691:(t,e,r)=>{"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r(801),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),s=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var h=u&&r;if(s&&t.length>0&&!o.call(t,0))for(var g=0;g<t.length;++g)p.push(String(g));if(n&&t.length>0)for(var d=0;d<t.length;++d)p.push(String(d));else for(var m in t)h&&"prototype"===m||!o.call(t,m)||p.push(String(m));if(c)for(var b=function(t){if("undefined"==typeof window||!y)return f(t);try{return f(t)}catch(t){return!1}}(t),v=0;v<l.length;++v)b&&"constructor"===l[v]||!o.call(t,l[v])||p.push(l[v]);return p}}t.exports=n},464:(t,e,r)=>{"use strict";var n=Array.prototype.slice,o=r(801),i=Object.keys,a=i?function(t){return i(t)}:r(691),s=Object.keys;a.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return o(t)?s(n.call(t)):s(t)})}else Object.keys=a;return Object.keys||a},t.exports=a},801:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),n}},938:(t,e)=>{e.bW="\n"},406:t=>{var e,r,n=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var s,c=[],u=!1,l=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):l=-1,c.length&&p())}function p(){if(!u){var t=a(f);u=!0;for(var e=c.length;e;){for(s=c,c=[];++l<e;)s&&s[l].run();l=-1,e=c.length}s=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function h(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||u||a(p)},y.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=h,n.addListener=h,n.once=h,n.off=h,n.removeListener=h,n.removeAllListeners=h,n.emit=h,n.prependListener=h,n.prependOnceListener=h,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},82:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},895:(t,e,r)=>{"use strict";var n=r(635),o=r(138),i=r(94),a=r(21);function s(t){return t.call.bind(t)}var c="undefined"!=typeof BigInt,u="undefined"!=typeof Symbol,l=s(Object.prototype.toString),f=s(Number.prototype.valueOf),p=s(String.prototype.valueOf),y=s(Boolean.prototype.valueOf);if(c)var h=s(BigInt.prototype.valueOf);if(u)var g=s(Symbol.prototype.valueOf);function d(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function m(t){return"[object Map]"===l(t)}function b(t){return"[object Set]"===l(t)}function v(t){return"[object WeakMap]"===l(t)}function S(t){return"[object WeakSet]"===l(t)}function w(t){return"[object ArrayBuffer]"===l(t)}function E(t){return"undefined"!=typeof ArrayBuffer&&(w.working?w(t):t instanceof ArrayBuffer)}function A(t){return"[object DataView]"===l(t)}function O(t){return"undefined"!=typeof DataView&&(A.working?A(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=o,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||O(t)},e.isUint8Array=function(t){return"Uint8Array"===i(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===i(t)},e.isUint16Array=function(t){return"Uint16Array"===i(t)},e.isUint32Array=function(t){return"Uint32Array"===i(t)},e.isInt8Array=function(t){return"Int8Array"===i(t)},e.isInt16Array=function(t){return"Int16Array"===i(t)},e.isInt32Array=function(t){return"Int32Array"===i(t)},e.isFloat32Array=function(t){return"Float32Array"===i(t)},e.isFloat64Array=function(t){return"Float64Array"===i(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===i(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===i(t)},m.working="undefined"!=typeof Map&&m(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(m.working?m(t):t instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(b.working?b(t):t instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(v.working?v(t):t instanceof WeakMap)},S.working="undefined"!=typeof WeakSet&&S(new WeakSet),e.isWeakSet=function(t){return S(t)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),e.isArrayBuffer=E,A.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&A(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=O;var x="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function j(t){return"[object SharedArrayBuffer]"===l(t)}function P(t){return void 0!==x&&(void 0===j.working&&(j.working=j(new x)),j.working?j(t):t instanceof x)}function T(t){return d(t,f)}function N(t){return d(t,p)}function R(t){return d(t,y)}function I(t){return c&&d(t,h)}function M(t){return u&&d(t,g)}e.isSharedArrayBuffer=P,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===l(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===l(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===l(t)},e.isGeneratorObject=function(t){return"[object Generator]"===l(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===l(t)},e.isNumberObject=T,e.isStringObject=N,e.isBooleanObject=R,e.isBigIntObject=I,e.isSymbolObject=M,e.isBoxedPrimitive=function(t){return T(t)||N(t)||R(t)||I(t)||M(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(E(t)||P(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},335:(t,e,r)=>{var n=r(406),o=r(716),i=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},a=/%[sdj%]/g;e.format=function(t){if(!S(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(l(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,i=String(t).replace(a,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<o;s=n[++r])b(s)||!A(s)?i+=" "+s:i+=" "+l(s);return i},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?o.trace(r):o.error(r),i=!0}return t.apply(this,arguments)}};var s={},c=/^$/;if(n.env.NODE_DEBUG){var u=n.env.NODE_DEBUG;u=u.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),c=new RegExp("^"+u+"$","i")}function l(t,r){var n={seen:[],stylize:p};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),m(r)?n.showHidden=r:r&&e._extend(n,r),w(n.showHidden)&&(n.showHidden=!1),w(n.depth)&&(n.depth=2),w(n.colors)&&(n.colors=!1),w(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),y(n,t,n.depth)}function f(t,e){var r=l.styles[e];return r?"["+l.colors[r][0]+"m"+t+"["+l.colors[r][1]+"m":t}function p(t,e){return t}function y(t,r,n){if(t.customInspect&&r&&j(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return S(o)||(o=y(t,o,n)),o}var i=function(t,e){if(w(e))return t.stylize("undefined","undefined");if(S(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return v(e)?t.stylize(""+e,"number"):m(e)?t.stylize(""+e,"boolean"):b(e)?t.stylize("null","null"):void 0}(t,r);if(i)return i;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),x(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return h(r);if(0===a.length){if(j(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(E(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(O(r))return t.stylize(Date.prototype.toString.call(r),"date");if(x(r))return h(r)}var u,l="",f=!1,p=["{","}"];return d(r)&&(f=!0,p=["[","]"]),j(r)&&(l=" [Function"+(r.name?": "+r.name:"")+"]"),E(r)&&(l=" "+RegExp.prototype.toString.call(r)),O(r)&&(l=" "+Date.prototype.toUTCString.call(r)),x(r)&&(l=" "+h(r)),0!==a.length||f&&0!=r.length?n<0?E(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),u=f?function(t,e,r,n,o){for(var i=[],a=0,s=e.length;a<s;++a)R(e,String(a))?i.push(g(t,e,r,n,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(g(t,e,r,n,o,!0))})),i}(t,r,n,s,a):a.map((function(e){return g(t,r,n,s,e,f)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(u,l,p)):p[0]+l+p[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function g(t,e,r,n,o,i){var a,s,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?s=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(s=t.stylize("[Setter]","special")),R(n,o)||(a="["+o+"]"),s||(t.seen.indexOf(c.value)<0?(s=b(r)?y(t,c.value,null):y(t,c.value,r-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),w(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function m(t){return"boolean"==typeof t}function b(t){return null===t}function v(t){return"number"==typeof t}function S(t){return"string"==typeof t}function w(t){return void 0===t}function E(t){return A(t)&&"[object RegExp]"===P(t)}function A(t){return"object"==typeof t&&null!==t}function O(t){return A(t)&&"[object Date]"===P(t)}function x(t){return A(t)&&("[object Error]"===P(t)||t instanceof Error)}function j(t){return"function"==typeof t}function P(t){return Object.prototype.toString.call(t)}function T(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!s[t])if(c.test(t)){var r=n.pid;s[t]=function(){var n=e.format.apply(e,arguments);o.error("%s %d: %s",t,r,n)}}else s[t]=function(){};return s[t]},e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(895),e.isArray=d,e.isBoolean=m,e.isNull=b,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=S,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=w,e.isRegExp=E,e.types.isRegExp=E,e.isObject=A,e.isDate=O,e.types.isDate=O,e.isError=x,e.types.isNativeError=x,e.isFunction=j,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(82);var N=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function R(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;o.log("%s - %s",(r=[T((t=new Date).getHours()),T(t.getMinutes()),T(t.getSeconds())].join(":"),[t.getDate(),N[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(285),e._extend=function(t,e){if(!e||!A(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var I="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function M(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(I&&t[I]){var e;if("function"!=typeof(e=t[I]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,I,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),I&&Object.defineProperty(e,I,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,i(t))},e.promisify.custom=I,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var o=e.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,a=function(){return o.apply(i,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(M.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,i(t)),e}},94:(t,e,r)=>{"use strict";var n=r(243),o=r(191),i=r(680),a=r(326),s=i("Object.prototype.toString"),c=r(226)(),u="undefined"==typeof globalThis?r.g:globalThis,l=o(),f=i("String.prototype.slice"),p={},y=Object.getPrototypeOf;c&&a&&y&&n(l,(function(t){if("function"==typeof u[t]){var e=new u[t];if(Symbol.toStringTag in e){var r=y(e),n=a(r,Symbol.toStringTag);if(!n){var o=y(r);n=a(o,Symbol.toStringTag)}p[t]=n.get}}}));var h=r(21);t.exports=function(t){return!!h(t)&&(c&&Symbol.toStringTag in t?function(t){var e=!1;return n(p,(function(r,n){if(!e)try{var o=r.call(t);o===n&&(e=o)}catch(t){}})),e}(t):f(s(t),8,-1))}},191:(t,e,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],o="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof o[n[e]]&&(t[t.length]=n[e]);return t}},581:function(t){var e;"undefined"!=typeof self&&self,e=()=>(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{HashMap:()=>c,HashSet:()=>u,HashedCollection:()=>a});class r{constructor(t){this.item=t}next(){return this.value=this.item,this.done=!this.item,this.item=this.item?this.item.next:void 0,this}}class n{prepend(t){var e=this.list;if(!(t&&t.append&&t.prepend&&t.detach))throw new Error("An argument without append, prepend, or detach methods was given to `Item#prepend`.");return!(!e||this===t)&&(t.detach(),this.prev&&(t.prev=this.prev,this.prev.next=t),t.next=this,t.list=e,this.prev=t,this===e.head&&(e.head=t),e.tail||(e.tail=this),e.size++,t)}append(t){var e=this.list;if(!(t&&t.append&&t.prepend&&t.detach))throw new Error("An argument without append, prepend, or detach methods was given to `Item#append`.");return!(!e||this===t)&&(t.detach(),this.next&&(t.next=this.next,this.next.prev=t),t.prev=this,t.list=e,this.next=t,this!==e.tail&&e.tail||(e.tail=t),e.size++,t)}detach(){var t=this.list;return t?(t.tail===this&&(t.tail=this.prev),t.head===this&&(t.head=this.next),t.tail===t.head&&(t.tail=null),this.prev&&(this.prev.next=this.next),this.next&&(this.next.prev=this.prev),this.prev=this.next=this.list=null,t.size--,this):this}}n.prototype.next=n.prototype.prev=n.prototype.list=null;class o{static of(...t){return i(new this,t)}static from(t){return i(new this,t)}constructor(...t){i(this,t)}toArray(){for(var t=this.head,e=[];t;)e.push(t),t=t.next;return e}prepend(t){if(!t)return!1;if(!t.append||!t.prepend||!t.detach)throw new Error("An argument without append, prepend, or detach methods was given to `List#prepend`.");return this.head?this.head.prepend(t):(t.detach(),t.list=this,this.head=t,this.size++,t)}append(t){if(!t)return!1;if(!t.append||!t.prepend||!t.detach)throw new Error("An argument without append, prepend, or detach methods was given to `List#append`.");return this.tail?this.tail.append(t):this.head?this.head.append(t):(t.detach(),t.list=this,this.head=t,this.size++,t)}[Symbol.iterator](){return new r(this.head)}}function i(t,e){var r,n,o;if(!e)return t;if(e[Symbol.iterator])for(o=e[Symbol.iterator](),n={};!n.done;)n=o.next(),t.append(n&&n.value);else for(r=-1;++r<e.length;)t.append(e[r]);return t}o.prototype.size=0,o.prototype.tail=o.prototype.head=null;class a extends Object{tally=0;constructor(){super()}}class s extends n{key;value;constructor(t,e){super(),this.key=t,this.value=e}getKey(){return this.key}getValue(){return this.value}getItem(){return[this.key,this.value]}}class c extends a{aMap;constructor(...t){super(),this.aMap=new Map,this.addAll(...t)}add(t){const[e,r]=t,n=e.hash();return this.aMap.has(n)?this.aMap.get(n)?.append(new s(e,r)):this.aMap.set(n,new o(new s(e,r))),this.tally+=1,this}addAll(...t){return t.forEach((t=>{this.add(t)})),this}clear(){this.aMap.clear(),this.tally=0}forEach(t){const e=this.entries();let r=e.next();for(;void 0!==r.done&&!r.done;){const[n,o]=r.value;t(o,n,this),r=e.next()}}entries(){return this.makeIterator(((t,e)=>[t,e]))}equals(t){if(null==t)return!1;if(!(t instanceof c))return!1;if(this.size()!==t.size())return!1;if(t.hash()!==this.hash())return!1;for(const[e,r]of this.entries()){const n=t.get(e);if(null===n)return!1;if(void 0!==r.equals){if(!1===r.equals(n))return!1}else if(r!==n)return!1}return!0}delete(t){const e=this.search(t);if(null!=e){const r=e.list;return e.detach(),this.tally-=1,0===r.size&&this.aMap.delete(t.hash()),e.getValue()}return null}get(t){const e=this.search(t);return null!==e?e.getValue():null}has(t){return null!==this.search(t)}hash(){return 0===this.tally?0:Array.from(this.aMap.keys()).reduce(((t,e)=>(t+e)%Number.MAX_SAFE_INTEGER))}keys(){return this.makeIterator((t=>t))}makeIterator(t){const e=this.aMap.values();return function*(){let r=e.next();for(;void 0!==r.done&&!r.done;){let n=r.value.head;for(;null!==n;){const[e,r]=n.getItem();yield t(e,r),n=n.next}r=e.next()}}()}search(t){const e=t.hash();if(this.aMap.has(e)){let r=this.aMap.get(e)?.head;for(;r;){const e=r.getKey();if(t.equals(e))return r;r=r.next}}return null}set(t,e){return this.add([t,e])}setDefault(t,e){return this.has(t)?null:(this.set(t,e),e)}size(){return this.tally}values(){return this.makeIterator(((t,e)=>e))}toArray(){const t=new Array;return this.tally,Array.from(this.aMap.values()).forEach((e=>{let r=e.head;for(;r;)t.push(r.getItem()),r=r.next})),t}toString(){const t=this.toArray().map((([t,e])=>`${String(t)} => ${String(e)}`)).join(", ");return`HashMap(${this.size()}) { ${t} }`}}class u extends a{aMap;constructor(...t){super(),this.aMap=new c,this.addAll(...t)}add(t){return this.has(t)||this.aMap.set(t,t),this}addAll(...t){return t.forEach((t=>{this.add(t)})),this}clear(){this.aMap.clear()}delete(t){return this.aMap.delete(t)}entries(){return this.aMap.entries()}equals(t){if(null==t)return!1;if(!(t instanceof u))return!1;if(this.size()!==t.size())return!1;if(t.hash()!==this.hash())return!1;for(const e of this.values())if(!t.has(e))return!1;return!0}forEach(t){const e=this.entries();let r=e.next();for(;void 0!==r.done&&!r.done;){const[n,o]=r.value;t(n,o,this),r=e.next()}}has(t){return this.aMap.has(t)}hash(){return this.aMap.hash()}keys(){return this.aMap.keys()}size(){return this.aMap.size()}values(){return this.keys()}toArray(){return this.aMap.toArray().map((t=>t[0]))}toString(){const t=this.toArray().map((t=>String(t))).join(", ");return`HashSet(${this.size()}) { ${t} }`}}return e})(),t.exports=e()}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";r.r(n),r.d(n,{AST:()=>x,SDElement:()=>R,SyntaxDiagram:()=>C});var t=r(938),e=r(581);class o extends Object{static stringToHash(t){let e=0;for(const r of t)e=31*e+r.charCodeAt(0),e=(0|e)%Number.MAX_SAFE_INTEGER;return e}}class i extends Object{}class a extends i{name;constructor(t){super(),this.name=t}getName(){return this.name}hash(){return o.stringToHash(this.name)%Number.MAX_SAFE_INTEGER}size(){return 1}}class s extends a{static Epsilon=new s("");constructor(t){super(t)}equals(t){return null!=t&&t instanceof s&&this.name===t.name}toString(){return""===this.name?"ε":this.name}}class c extends a{constructor(t){super(t)}equals(t){return null!=t&&t instanceof c&&this.hash()===t.hash()&&this.name===t.name}toString(){return`Node(${this.name})`}}class u extends i{child;constructor(t){super(),this.child=t}getChild(){return this.child}hash(){return this.child.hash()%Number.MAX_SAFE_INTEGER}size(){return this.child.size()+1}}class l extends u{maxRepeatCount;minRepeatCount;constructor(t,e=0,r=Number.POSITIVE_INFINITY){if(super(t),e<0||r<0||!Number.isInteger(e)||!Number.isInteger(r)&&r!==Number.POSITIVE_INFINITY)throw Error("繰り返しの回数は正の整数である必要があります");if(r<e)throw Error("繰り返しの最大回数が最小回数よりも大きい必要があります");this.minRepeatCount=e,this.maxRepeatCount=r}equals(t){return null!=t&&t instanceof l&&this.hash()===t.hash()&&this.maxRepeatCount===t.getMaxRepeatCount()&&this.minRepeatCount===t.getMinRepeatCount()&&this.child.equals(t.child)}getMaxRepeatCount(){return this.maxRepeatCount}getMinRepeatCount(){return this.minRepeatCount}hash(){const t=new Array;return t.push(this.minRepeatCount),this.maxRepeatCount===Number.POSITIVE_INFINITY?t.push(0):t.push(this.maxRepeatCount),t.push(super.hash()),t.reduce(((t,e)=>(t+e)%Number.MAX_SAFE_INTEGER),0)}isOneOrMore(){return 1===this.minRepeatCount&&this.maxRepeatCount===Number.POSITIVE_INFINITY}isZeroOrMore(){return 0===this.minRepeatCount&&this.maxRepeatCount===Number.POSITIVE_INFINITY}isZeroOrOne(){return 0===this.minRepeatCount&&1===this.maxRepeatCount}toString(){return`Closure(${this.child.toString()}, {${this.minRepeatCount},${this.maxRepeatCount}})`}}class f extends l{constructor(t){super(t,0,1)}}class p extends i{car;cdr;constructor(t,e){super(),this.car=t,this.cdr=e}getCar(){return this.car}getCdr(){return this.cdr}hash(){return(this.car.hash()+this.cdr.hash())%Number.MAX_SAFE_INTEGER}size(){return this.car.size()+this.cdr.size()+1}}class y extends p{static fromArray(t){return(t=t.filter((t=>!t.equals(s.Epsilon)))).length<=1?t.at(0)??s.Epsilon:t.reverse().reduce(((t,e)=>new y(e,t)))}constructor(t,e){super(t,e)}equals(t){if(null==t)return!1;if(!(t instanceof y))return!1;if(this.hash()!==t.hash())return!1;const e=this.expand(),r=t.expand();return e.length===r.length&&e.every(((t,e)=>t.equals(r.at(e))))}expand(){let t=new Array;return[this.car,this.cdr].forEach((e=>{e instanceof y?t=t.concat(e.expand()):t.push(e)})),t}toString(){return"Concat("+this.car.toString()+", "+this.cdr.toString()+")"}}class h extends p{static fromArray(t){return(t=Array.from(new e.HashSet(...t).values())).length<=1?t.at(0)??s.Epsilon:t.reduce(((t,e)=>new h(e,t)))}constructor(t,e){if(super(t,e),e instanceof y&&([t,e]=[e,t]),t instanceof h&&(this.car=t.getCar(),this.cdr=new h(t.getCdr(),e)),this.cdr instanceof h&&this.cdr.getCar()instanceof y&&!(this.car instanceof y)){const t=this.car;this.car=this.cdr.getCar(),this.cdr=new h(t,this.cdr.getCdr())}}equals(t){if(null==t)return!1;if(!(t instanceof h))return!1;if(this.hash()!==t.hash())return!1;const r=new e.HashSet(...this.expand()),n=new e.HashSet(...t.expand());return r.equals(n)}expand(){const t=new e.HashSet,r=new Array(this);for(;r.length>0;){const e=r.pop();void 0!==e&&[e.getCar(),e.getCdr()].forEach((e=>{e instanceof h?r.push(e):t.add(e)}))}return t.toArray()}toString(){return"Alt("+this.car.toString()+", "+this.cdr.toString()+")"}}class g extends Object{anAST;constructor(t){super(),this.anAST=t}transformSymbol(t){if(t instanceof h)return this.transformAlternation(t);if(t instanceof y)return this.transformConcatenation(t);if(t instanceof l)return this.transformClosure(t);if(t instanceof s)return this.transformLeaf(t);if(t instanceof c)return this.transformNode(t);throw Error(`'${t.constructor.name}'は変換に対応していません`)}}class d extends g{static memoMap=new e.HashMap;static BIND=" ::= ";static OR_SEPARATOR="|";static ZERO_OR_MORE="*";static ONE_OR_MORE="+";static L_PER="(";static R_PER=")";static SPACE=" ";static QUOTATION="'";static DOUBLE_QUOTATION='"';static OPTIONAL="?";static END_OF_STATEMENT="";constructor(t){super(t)}transformAlternation(t){const e=t.expand();let r=e.map((t=>this.transformSymbol(t))).join(d.SPACE+d.OR_SEPARATOR+d.SPACE);return e.length>1&&(r=d.L_PER+r+d.R_PER),r}transformConcatenation(t){return t.expand().map((t=>this.transformSymbol(t))).join(d.SPACE)}transformClosure(t){const e=t.getChild();let r=this.transformSymbol(e),n=null;if(t.isZeroOrMore()?n=d.ZERO_OR_MORE:t.isZeroOrOne()?n=d.OPTIONAL:t.isOneOrMore()&&(n=d.ONE_OR_MORE),null===n){const r=t.getMinRepeatCount(),n=t.getMaxRepeatCount();return this.transformSymbol(y.fromArray(new Array(r).fill(e).concat(new Array(n-r).fill(new f(e)))))}return[s,c,h].some((t=>e instanceof t))||(r=d.L_PER+r+d.R_PER),r+n}transformLeaf(t){if(t.equals(s.Epsilon))return"";const e=t.getName(),r=e.includes(d.QUOTATION),n=e.includes(d.DOUBLE_QUOTATION);let o=d.DOUBLE_QUOTATION;if(r&&n){const t=new Array;let r=0;return Array.from(e).forEach(((n,i)=>{n===o&&(t.push(new s(e.slice(r,i))),r=i,d.DOUBLE_QUOTATION,o=d.QUOTATION)})),t.push(new s(e.slice(r))),this.transformSymbol(y.fromArray(t))}return n&&(o=d.QUOTATION),o+t.getName()+o}transformNode(t){return t.getName()}transformSymbol(t){let e=d.memoMap.get(t);return null!==e||(e=super.transformSymbol(t),d.memoMap.set(t,e)),e}transform(){return this.anAST.getName()+d.BIND+this.transformSymbol(this.anAST.getRoot())+d.END_OF_STATEMENT}}class m extends l{constructor(t){super(t,0,Number.POSITIVE_INFINITY)}}var b=r(716);class v extends Object{isEnd=!1;next=new e.HashMap;constructor(){super()}addNext(t){let e=this.next.get(t);return null===e&&(e=new v,this.next.set(t,e)),e}getNext(){return this.next}}class S extends Object{root=new v;isSimplifySuffix;addCounter=0;constructor(t,e=!1){super(),this.isSimplifySuffix=e,this.add(t),this.prettyPrint()}transformClosureForSimplification(t){const e=t.getChild(),r=t.getMinRepeatCount(),n=t.getMaxRepeatCount();if(t.isZeroOrOne()||t.isZeroOrMore())return[t];const o=new Array(r).fill(e);return n===Number.POSITIVE_INFINITY?o.push(new m(e)):o.push(...new Array(n-r).fill(new f(e))),o}transformConcatenationForSimplification(t){const e=t.expand().flatMap((t=>t instanceof l?this.transformClosureForSimplification(t):[t]));return this.isSimplifySuffix&&e.reverse(),e}add(t){let e=this.root;if(t instanceof y)this.transformConcatenationForSimplification(t).forEach((t=>{e=e.addNext(t)}));else{if(t instanceof h)return void t.expand().forEach((t=>{this.add(t)}));if(t instanceof l){const r=y.fromArray(this.transformClosureForSimplification(t));if(!r.equals(t))return void this.add(r);e=e.addNext(r)}else e=e.addNext(t)}this.addCounter+=1,e.isEnd=!0}isSimplified(){return this.root.getNext().size()===this.addCounter}_prettyPrint(e,r,n){if(n.has(e))return"";let o="";const i=new Array(r).fill(" ").join("");return e.isEnd&&(o+=i+"<E>"+t.bW),e.getNext().forEach(((e,a)=>{o+=i+a.toString()+t.bW,o+=this._prettyPrint(e,r+4,n),n.add(e)})),o}prettyPrint(){b.log(this._prettyPrint(this.root,0,new Set))}_simplify(t){const e=new Array;return t.isEnd&&e.push(s.Epsilon),t.getNext().forEach(((t,r)=>{this.isSimplifySuffix?e.push(y.fromArray([this._simplify(t),r])):e.push(y.fromArray([r,this._simplify(t)]))})),h.fromArray(e)}simplify(){return this._simplify(this.root)}}class w extends Object{static toOptionalIfIncludeEpsilon(t){const[e,r]=[t.getCar(),t.getCdr()],n=new Array([e,r],[r,e]);for(const[t,e]of n){if(t.equals(s.Epsilon))return new f(e);if(t instanceof l&&t.isZeroOrOne())return new f(new h(t.getChild(),e))}return t}static omitAffix(t){const e=new S(t,!1);if(!e.isSimplified())return e.simplify();const r=new S(t,!0);return r.isSimplified()?t:r.simplify()}}class E extends Object{static margeClosure(t){const e=t.getChild();if(e instanceof l){const[r,n]=[t.getMinRepeatCount(),t.getMaxRepeatCount()],[o,i]=[e.getMinRepeatCount(),e.getMaxRepeatCount()],a=(...t)=>t.length<2||t.slice(0,-1).every(((e,r)=>e<=t[r+1])),s=a(r,o,n,i),c=a(o,r,i,n);if(s||c)return new l(e.getChild(),Math.min(r,o),Math.max(n,i))}return t}}class A{static bringConcatenationToRightSide(t){const[e,r]=[t.getCar(),t.getCdr()];return e instanceof y?y.fromArray([e.getCar(),e.getCdr(),r]):t}static mergeConcatenationsIntoClosure(t){const e=t.expand(),r=e.length;for(;;){let t=!1;for(const[r,n]of e.entries())if(n instanceof l){const o=n.getChild();for(const i of e.keys()){if(i===r)continue;let[a,s]=[r+1,i];s<a&&([a,s]=[i,r-1]);const c=e.slice(a,s+1),u=y.fromArray(c);if(o.equals(u)){e.splice(Math.min(r,i),c.length+1,new l(o,n.getMinRepeatCount()+1,n.getMaxRepeatCount()+1)),t=!0;break}}if(t)break}if(!t)break}return e.length===r?t:y.fromArray(e)}static mergeSameClosures(t){const[e,r]=[t.getCar(),t.getCdr()];if(e instanceof l&&r instanceof l&&e.getChild().equals(r.getChild())){const t=e.getMinRepeatCount()+r.getMinRepeatCount(),n=e.getMaxRepeatCount()+r.getMaxRepeatCount();return new l(e.getChild(),t,n)}return t}}class O extends g{static memoMap=new e.HashMap;transformConcatenation(t){const e=this.transformSymbol(t.getCar()),r=this.transformSymbol(t.getCdr());if(e.equals(s.Epsilon))return r;if(r.equals(s.Epsilon))return e;t=new y(e,r);const n=A.bringConcatenationToRightSide(t);if(n!==t)return this.transformSymbol(n);const o=A.mergeSameClosures(t);if(o!==t)return this.transformSymbol(o);const i=A.mergeConcatenationsIntoClosure(t);return i!==t?this.transformSymbol(i):t}transformAlternation(t){const e=this.transformSymbol(t.getCar()),r=this.transformSymbol(t.getCdr());if(e.equals(r))return e;t=new h(e,r);const n=w.toOptionalIfIncludeEpsilon(t);if(t!==n)return this.transformSymbol(n);const o=w.omitAffix(t);return o!==t?this.transformSymbol(o):t}transformClosure(t){const e=this.transformSymbol(t.getChild());if(e.equals(s.Epsilon))return s.Epsilon;t=new l(e,t.getMinRepeatCount(),t.getMaxRepeatCount());const r=E.margeClosure(t);return t!==r?this.transformSymbol(r):t}transformLeaf(t){return t}transformNode(t){return t}transformSymbol(t){let e=O.memoMap.get(t);return null!==e||(e=super.transformSymbol(t),O.memoMap.set(t,e)),e}constructor(t){super(t)}transform(){return new x(this.transformSymbol(this.anAST.getRoot()),this.anAST.getName())}}class x extends Object{root;name;constructor(t=s.Epsilon,e=""){super(),this.root=t,this.name=e}equals(t){return null!=t&&t instanceof x&&this.name===t.name&&this.root.equals(t.root)}getName(){return this.name}getRoot(){return this.root}setName(t){this.name=t}setRoot(t){this.root=t}simplify(){return new O(this).transform()}toEBNF(){const t=new O(this).transform();return new d(t).transform()}toString(){return`AST(${this.root.toString()})`}}class j extends Object{from;to;symbol;constructor(t,e,r){super(),this.from=t,this.to=e,this.symbol=r}delete(){this.from.removeTransition(this),this.to.removeTransition(this)}getFrom(){return this.from}getSymbol(){return this.symbol}getTo(){return this.to}}class P extends Object{entries=new Set;exits=new Set;loops=new Set;name;constructor(t=""){super(),this.name=t}addEntry(t){this.entries.add(t)}addExits(t){this.exits.add(t)}merge(){let t=s.Epsilon;0!==this.loops.size&&(t=new l(h.fromArray(Array.from(this.loops).map((t=>t.getSymbol()))))),this.entries.forEach((e=>{const r=e.getFrom();this.exits.forEach((n=>{const o=n.getTo();r.transitionTo(o,y.fromArray([e.getSymbol(),t,n.getSymbol()]))}))})),this.entries.forEach((t=>{t.delete()})),this.exits.forEach((t=>{t.delete()}))}getExits(){return Array.from(this.exits)}getEntries(){return Array.from(this.entries)}getLoops(){return Array.from(this.loops)}getName(){return this.name}removeTransition(t){this.exits.delete(t),this.entries.delete(t),this.loops.delete(t)}toString(){return this.name}transitionTo(t,e){const r=new j(this,t,e);t===this?this.loops.add(r):(this.addExits(r),t.addEntry(r))}}var T=r(716);class N extends Object{name;start;end;constructor(t=""){super(),this.name=t,this.start=new P("<S>"),this.end=new P("<E>")}addStart(t){this.start.transitionTo(t,s.Epsilon)}addEnd(t){t.transitionTo(this.end,s.Epsilon)}getName(){return this.name}_prettyPrint(r,n,o){const i=Array(n).fill(" ").join(""),a=new Array;if(a.push(r.toString(),t.bW),!o.has(r)){o.add(r);const s=new e.HashMap;r.getExits().concat(...r.getLoops()).forEach((t=>{const e=t.getSymbol(),r=t.getTo();s.setDefault(e,new Set),s.get(e)?.add(r)}));const c=(t,e)=>{const r=t[0].toString(),n=e[0].toString();return r===n?0:r>n?1:-1};Array.from(s.entries()).sort(((t,e)=>c(t,e))).forEach((([e,r])=>{const s=e.toString();a.push(i,s,t.bW),r.forEach((t=>{a.push(i,Array(s.length/2|0).fill(" ").join(""),"|---"),a.push(this._prettyPrint(t,n+4,o))}))}))}return a.join("")}prettyPrint(){T.log(this._prettyPrint(this.start,0,new Set))}setName(t){this.name=t}toAST(){for(;;){if(0==this.start.getExits().length)throw Error("error : startとendが繋がっていません。");let t=null;for(const e of this.start.getExits())if(e.getTo()!==this.end){t=e.getTo();break}if(null===t)break;t.merge()}return new x(h.fromArray(this.start.getExits().map((t=>t.getSymbol()))),this.name)}}class R extends Object{isEnd=!1;isStart=!1;syntaxDiagram;constructor(t){super(),this.syntaxDiagram=t}connectTo(t){this.syntaxDiagram.addConnection(this,t)}disconnectFrom(t){this.syntaxDiagram.removeConnection(this,t)}getNext(){return new Set(this.syntaxDiagram.getConnections().get(this))}getBelongingSyntaxDiagram(){return this.syntaxDiagram}remove(){this.syntaxDiagram.removeElement(this)}toString(){const t=this.constructor.name,e=Array.from(this.getNext()).map((t=>`${t.constructor.name}('${t.getName()}')`)).join(", ");return`${t}('${this.getName()}') => [ ${e} ]`}}class I extends R{aName;constructor(t,e){super(t),this.aName=e}getName(){return this.aName}setName(t){this.aName=t}toASTSymbol(){return new s(this.aName)}}class M extends R{bindSyntaxDiagram;constructor(t,e){super(t),this.bindSyntaxDiagram=e}getName(){return this.bindSyntaxDiagram.getName()}getBindSyntaxDiagram(){return this.bindSyntaxDiagram}setName(t){this.bindSyntaxDiagram.setName(t)}toASTSymbol(){return new c(this.getName())}}class C extends Object{elements=new Set;connections=new Map;name;constructor(t){super(),this.name=t}addConnection(t,e){if(!this.elements.has(t)||!this.elements.has(e))throw Error("The nodes to be connected must belong to the same SyntaxDiagram.");const r=this.connections.get(t)??new Set;this.connections.set(t,r),r.add(e)}createLeaf(t){const e=new I(this,t);return this.elements.add(e),e}createNode(t){const e=new M(this,t);return this.elements.add(e),e}getConnections(){return new Map(this.connections)}getElements(){return new Set(this.elements)}getName(){return this.name}removeElement(t){this.elements.delete(t),this.connections.delete(t),this.connections.forEach((e=>{e.delete(t)}))}removeConnection(t,e){const r=this.connections.get(t);void 0!==r&&r.delete(e)}setName(t){this.name=t}toAST(){return this.toNFA().toAST()}toEBNF(){return this.toAST().toEBNF()}toNFA(){const t=new N(this.getName()),e=new Map;return this.elements.forEach((r=>{const n=new P(`State: ${r.getName()}`);r.isStart&&t.addStart(n),r.isEnd&&t.addEnd(n),e.set(r,n)})),this.connections.forEach(((t,r)=>{const n=e.get(r);void 0!==n&&t.forEach((t=>{const o=e.get(t);void 0!==o&&n.transitionTo(o,r.toASTSymbol())}))})),t}toString(){return Array.from(this.elements.values()).map((t=>t.toString())).join(t.bW)}}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,